services:
  postgres:
    container_name: postgres
    image: postgres:12.2-alpine
    environment:
      - POSTGRES_DB=nakama
      - POSTGRES_PASSWORD=localdb
    volumes:
      - data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "nakama"]
      interval: 3s
      timeout: 3s
      retries: 5
    networks:
      - game-network

  nakama:
    container_name: nakama
    image: registry.heroiclabs.com/heroiclabs/nakama:3.22.0
    entrypoint:
      - "/bin/sh"
      - "-ecx"
      - >
          /nakama/nakama migrate up --database.address postgres:localdb@postgres:5432/nakama &&
          exec /nakama/nakama --name nakama1 --database.address postgres:localdb@postgres:5432/nakama --logger.level DEBUG --session.token_expiry_sec 7200 --runtime.path /nakama/data/modules
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./docker/nakama/data/modules:/nakama/data/modules
      - ./config.yml:/nakama/config.yml
    ports:
      - "7349:7349"
      - "7350:7350"
      - "7351:7351"
    healthcheck:
      test: ["CMD", "/nakama/nakama", "healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - game-network

  unity-server:
    container_name: unity-server
    build:
      context: .
      dockerfile: docker/unity-server/Dockerfile
    environment:
      - NAKAMA_SERVER=nakama
      - NAKAMA_PORT=7350
      - SERVER_PORT=7777
      - KCP_TIMEOUT=30000
      - KCP_NO_DELAY=true
      - KCP_INTERVAL=10
      - BIND_IP=0.0.0.0
    ports:
      - "7777:7777/udp"
    volumes:
      - ./builds:/game/builds
    depends_on:
      nakama:
        condition: service_healthy
    networks:
      - game-network

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - game-network

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - game-network

networks:
  game-network:
    driver: bridge

volumes:
  data:
  prometheus_data:
  grafana_data: